{"version":3,"sources":["redux/reducers/user/index.ts","redux/actions/user.ts","redux/reducers/cache/index.ts","redux/actions/cache.ts","redux/reducers/aplication/index.ts","redux/actions/aplication.ts","redux/rootReducer.ts","redux/store/index.ts","components/SearchBar.tsx","components/functions/formatDate.ts","components/GithubUser/index.tsx","components/UserRepositories/index.tsx","axios.ts","components/Aplication/services/fetchGithubRepos.ts","components/Aplication/hooks/useGithubUser.ts","components/Aplication/index.tsx","App.tsx","index.tsx"],"names":["initialState","id","email","nickname","name","avatarURL","description","createdAt","repos","followers","following","repositories","cache","state","action","type","payload","users","alreadyCached","find","cachedUser","etag","toLowerCase","updatedUsersCached","filter","query","fetchUserStart","fetchUserSuccess","fetchUserFail","showRepositories","rootReducer","combineReducers","user","aplication","persistConfig","key","storage","whitelist","getCachedUsers","serializadeState","localStorage","getItem","rawDataFromLocalStorage","JSON","parse","err","console","log","loadFromLocalStorage","persistedReducer","persistReducer","store","createStore","composeWithDevTools","persistor","persistStore","SearchBarContainer","styled","header","SearchBar","callback","cachedUsers","useSelector","map","e","title","image","useState","resultsOfQuery","setResultsOfQuery","Image","src","alt","Search","value","onSearchChange","regexNickname","RegExp","test","handleSearchChange","onResultSelect","result","results","placeholder","formatDate","date","dateUnformated","Date","getDate","getMonth","getFullYear","CardContainer","div","GithubUser","dispatch","useDispatch","Card","href","wrapped","Content","Header","Meta","Description","List","Item","extra","Icon","Button","primary","content","onClick","ListContainer","props","isVisible","UserRepositories","currentPage","setCurrentPage","link","_","i","repo","linkTo","Pagination","boundaryRange","defaultActivePage","ellipsisItem","firstItem","lastItem","Math","ceil","length","siblingRange","totalPages","onPageChange","activePage","Number","axios","create","baseURL","timeout","fetchGithubRepos","a","get","response","data","language","html_url","created_at","useGithubUser","useEffect","headers","login","avatar_url","bio","public_repos","status","fetchGithubUser","AppContainer","main","Aplication","githubUser","setQuery","undefined","handleTimeout","clearTimeout","timer","setTimeout","App","loading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0526219a.chunk.js","sourcesContent":["import {UserSchema, ActionUserSchema} from './types';\nimport {SET_USER, SET_USER_REPOSITORIES} from '../../actions/user';\n\nconst initialState: UserSchema = {\n  id: '',\n  email: '',\n  nickname: '',\n  name: '',\n  avatarURL: '',\n  description: '',\n  createdAt: '',\n  repos: 0,\n  followers: 0,\n  following: 0,\n  repositories: []\n};\n\nconst cache = (state = initialState, action: ActionUserSchema) => {\n  switch (action.type) {\n    case SET_USER: {\n      return {\n        ...state,\n        id: action.payload?.id,\n        email: action.payload?.email,\n        nickname: action.payload?.nickname,\n        name: action.payload?.name,\n        avatarURL: action.payload?.avatarURL,\n        description: action.payload?.description,\n        createdAt: action.payload?.createdAt,\n        repos: action.payload?.repos,\n        followers: action.payload?.followers,\n        following: action.payload?.following,\n        repositories: action.payload?.repositories\n      };\n    }\n\n    default:\n      return {...state};\n  }\n};\n\nexport default cache;\n","export const SET_USER = 'SET_USER';\nexport const SET_USER_REPOSITORIES = 'SET_USER_REPOSITORIES';\n","import {ActionCacheSchema, UserETagSchema} from './types';\nimport {CACHE_THIS_USER, THIS_USER_IS_CACHED} from '../../actions/cache';\n\nconst initialState = {\n  users: []\n};\n\nconst cache = (state = initialState, action: ActionCacheSchema) => {\n  switch (action.type) {\n    case CACHE_THIS_USER: {\n      const alreadyCached = state.users.find(\n        (cachedUser: UserETagSchema) =>\n          cachedUser.etag.toLowerCase() === action.payload?.etag.toLowerCase()\n      );\n\n      const updatedUsersCached = state.users.filter(\n        (cachedUser: UserETagSchema) =>\n          !(cachedUser.nickname.toLowerCase() === action.payload?.query.toLowerCase())\n      );\n\n      if (alreadyCached) {\n        return {...state, users: [...updatedUsersCached, {...action.payload}]};\n      }\n\n      return {...state, users: [...state.users, {...action.payload}]};\n    }\n\n    case THIS_USER_IS_CACHED: {\n      return {...state};\n    }\n    default:\n      return {...state};\n  }\n};\n\nexport default cache;\n","export const CACHE_THIS_USER = 'CACHE_THIS_USER';\nexport const THIS_USER_IS_CACHED = 'THIS_USER_IS_CACHED';\n","import {AplicationSchema, ActionAplicationSchema} from './types';\nimport {\n  FETCH_USER_START,\n  FETCH_USER_SUCCESS,\n  FETCH_USER_FAIL,\n  TOGGLE_SHOW_REPOSITORIES\n} from '../../actions/aplication';\n\nconst initialState: AplicationSchema = {\n  fetchUserStart: false,\n  fetchUserSuccess: false,\n  fetchUserFail: false,\n  showRepositories: false\n};\n\nconst cache = (state = initialState, action: ActionAplicationSchema) => {\n  switch (action.type) {\n    case FETCH_USER_START: {\n      return {...state, fetchUserStart: true, fetchUserSuccess: false, fetchUserFail: false};\n    }\n\n    case FETCH_USER_SUCCESS: {\n      return {...state, fetchUserStart: false, fetchUserSuccess: true, fetchUserFail: false};\n    }\n\n    case FETCH_USER_FAIL: {\n      return {...state, fetchUserStart: false, fetchUserSuccess: false, fetchUserFail: true};\n    }\n\n    case TOGGLE_SHOW_REPOSITORIES: {\n      return {...state, showRepositories: !state.showRepositories};\n    }\n    default:\n      return {...state};\n  }\n};\n\nexport default cache;\n","export const FETCH_USER_START = 'FETCH_USER_START';\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\nexport const FETCH_USER_FAIL = 'FETCH_USER_FAIL';\nexport const TOGGLE_SHOW_REPOSITORIES = 'TOGGLE_SHOW_REPOSITORIES';\n","import {combineReducers} from 'redux';\n\nimport user from './reducers/user';\nimport cache from './reducers/cache';\nimport aplication from './reducers/aplication';\n\nconst rootReducer = combineReducers({user, cache, aplication});\n\nexport default rootReducer;\n","import {createStore} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport {persistStore, persistReducer} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport rootReducer from '../rootReducer';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['cache']\n};\n\nconst loadFromLocalStorage = () => {\n  try {\n    const serializadeState = localStorage.getItem('persist:root');\n\n    if (serializadeState === null) {\n      return undefined;\n    }\n    const rawDataFromLocalStorage = JSON.parse(serializadeState);\n    const cachedUsers = {cache: JSON.parse(rawDataFromLocalStorage.cache)};\n\n    return cachedUsers;\n  } catch (err) {\n    console.log(err);\n    return undefined;\n  }\n};\n\nconst getCachedUsers = loadFromLocalStorage();\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(persistedReducer, getCachedUsers, composeWithDevTools());\nexport const persistor = persistStore(store);\n","import React, {useMemo, useState} from 'react';\nimport {useSelector} from 'react-redux';\nimport styled from 'styled-components';\nimport {Image, Search} from 'semantic-ui-react';\nimport {CacheSchema} from '../redux/reducers/cache/types';\nimport {StoreSchema} from '../redux/store/types';\n\ninterface SearchBar {\n  callback: (value: string) => void;\n  query: string;\n}\n\nconst SearchBar = ({callback, query}: SearchBar) => {\n  const {users} = useSelector<StoreSchema, CacheSchema>(state => state.cache);\n\n  const cachedUsers = users.map(e => ({\n    title: e.nickname,\n    description: e.description || 'No description',\n    image: e.avatarURL,\n    query: e.nickname\n  }));\n\n  const [resultsOfQuery, setResultsOfQuery] = useState(cachedUsers);\n\n  const handleSearchChange = (value: string) => {\n    callback(value);\n\n    const regexNickname = new RegExp(value, 'i');\n    setResultsOfQuery(cachedUsers.filter(e => regexNickname.test(e.title)));\n  };\n\n  return (\n    <SearchBarContainer>\n      <div id=\"title\">\n        <Image\n          src=\"/home/denis/Documentos/developer/github-app/src/assets/github.png\"\n          alt=\"Github logo\"\n        />\n        <h1>Github Aplication</h1>\n      </div>\n      <Search\n        id=\"search\"\n        value={query}\n        onSearchChange={(e, {value}) => handleSearchChange(value || '')}\n        onResultSelect={(e, {result}) => callback(result.query || '')}\n        results={resultsOfQuery}\n        placeholder=\"Search for cached users\"\n      />\n    </SearchBarContainer>\n  );\n};\n\nconst SearchBarContainer = styled.header`\n  width: 100vw;\n  height: 80px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background: hsl(180, 75%, 20%);\n\n  #title {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-left: 246px;\n    width: 413px;\n    h1 {\n      margin: 0;\n      font-size: 36px;\n      font-weight: bold;\n    }\n  }\n\n  .search {\n    margin-right: 246px;\n  }\n`;\n\nexport default SearchBar;\n","const formatDate = (date: string) => {\n  const dateUnformated = new Date(date);\n  const dateFromated = `${dateUnformated.getDate()}/${dateUnformated.getMonth()}/${dateUnformated.getFullYear()}`;\n  return dateFromated;\n};\n\nexport default formatDate;\n","import React from 'react';\nimport {useDispatch} from 'react-redux';\nimport styled from 'styled-components';\nimport {Image, Card, Icon, List, Button} from 'semantic-ui-react';\nimport {GithubUserSchema} from './types';\n\nimport formatDate from '../functions/formatDate';\nimport {TOGGLE_SHOW_REPOSITORIES} from '../../redux/actions/aplication';\n\nconst GithubUser = ({\n  nickname,\n  email,\n  avatarURL,\n  name,\n  createdAt,\n  description,\n  repos,\n  following,\n  followers\n}: GithubUserSchema) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <CardContainer>\n        <Card>\n          <a href={`https://github.com/${nickname}`}>\n            <Image src={avatarURL} wrapped />\n          </a>\n          <Card.Content id=\"content-1\">\n            <Card.Header id=\"name\">{name}</Card.Header>\n\n            <Card.Meta id=\"created-at\">\n              <span>{`Entrou no Github em: ${formatDate(createdAt)}`}</span>\n            </Card.Meta>\n\n            <Card.Description id=\"description\">{description}</Card.Description>\n          </Card.Content>\n          <Card.Content id=\"repos\">\n            <List id=\"list\">\n              <List.Item id=\"list-item\">{`Repositórios: ${repos}`}</List.Item>\n              <List.Item id=\"list-item\">{`Seguidores: ${followers}`}</List.Item>\n              <List.Item id=\"list-item\">{`Seguindo: ${following}`}</List.Item>\n            </List>\n          </Card.Content>\n\n          <Card.Content extra>\n            <span>\n              <Icon name=\"mail\" />\n              {email || 'No email provided'}\n            </span>\n          </Card.Content>\n\n          <Button\n            primary\n            id=\"button-repositories\"\n            content=\"Ver repositórios\"\n            onClick={() => dispatch({type: TOGGLE_SHOW_REPOSITORIES})}\n          />\n        </Card>\n      </CardContainer>\n    </>\n  );\n};\n\nconst CardContainer = styled.div`\n  margin-top: 60px;\n  #content-1 {\n    width: 100%;\n    padding: 10px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    #name {\n      width: 100%;\n      margin-bottom: 10px;\n    }\n    #created-at {\n      width: 100%;\n      margin: 0;\n    }\n\n    #description {\n      width: 100%;\n    }\n  }\n\n  #repos {\n    width: 100%;\n    padding: 10px;\n\n    #list {\n      display: flex;\n      #list-item {\n        font-size: 12px;\n        margin: 0px 5px;\n        padding: 0;\n      }\n    }\n  }\n\n  #button-repositories {\n    width: calc(100% - 10px);\n    padding: 20px 0px;\n    margin: 5px;\n  }\n`;\n\nexport default GithubUser;\n","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\nimport styled from 'styled-components';\nimport {List, Icon, Pagination} from 'semantic-ui-react';\nimport {UserRepositoriesSchema} from './types';\n\nimport formatDate from '../functions/formatDate';\nimport {StoreSchema} from '../../redux/store/types';\nimport {AplicationSchema} from '../../redux/reducers/aplication/types';\n\nconst UserRepositories = ({repositories}: UserRepositoriesSchema) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const {showRepositories} = useSelector<StoreSchema, AplicationSchema>(state => state.aplication);\n\n  return (\n    <>\n      <ListContainer isVisible={showRepositories}>\n        <List id=\"list\" link>\n          {repositories\n            .filter((_, i) => i < currentPage * 9 && i > (currentPage - 1) * 9)\n            .map(repo => (\n              <List.Item id=\"list-item\" key={repo.id}>\n                <a href={repo.linkTo}>\n                  <Icon name=\"triangle right\" />\n                  <List.Content>\n                    <List.Header>{repo.name}</List.Header>\n                    <List.Description>\n                      {`Repositório criado em: ${formatDate(repo.createdAt)}`}\n                    </List.Description>\n                  </List.Content>\n                </a>\n              </List.Item>\n            ))}\n        </List>\n        <Pagination\n          id=\"pagination\"\n          boundaryRange={0}\n          defaultActivePage={1}\n          ellipsisItem={null}\n          firstItem={1}\n          lastItem={Math.ceil(repositories.length / 8)}\n          siblingRange={1}\n          totalPages={Math.ceil(repositories.length / 8)}\n          onPageChange={(e, {activePage}) =>\n            setCurrentPage(typeof activePage === 'number' ? activePage : Number(activePage))\n          }\n        />\n      </ListContainer>\n    </>\n  );\n};\n\nconst ListContainer = styled.div`\n  display: ${(props: {isVisible: boolean}) => (props.isVisible ? 'flex' : 'none')};\n  flex-direction: column;\n  justify-content: space-between;\n  position: absolute;\n  right: 216px;\n  bottom: 20px;\n  align-items: center;\n  height: 230px;\n  width: 900px;\n  background: #fff;\n\n  #list {\n    display: flex;\n    #list-item {\n      margin-top: 20px;\n      width: 100%;\n      a {\n        display: flex;\n      }\n    }\n\n    #pagination {\n      position: absolute;\n      bottom: ;\n    }\n  }\n`;\n\nexport default UserRepositories;\n","import axios from 'axios';\n\nconst config = {\n  baseURL: 'https://api.github.com',\n  timeout: 5000\n};\n\nexport default axios.create(config);\n","import axios from '../../../axios';\n\ntype reposFromGithub = {\n  name: string;\n  id: number;\n  language: string | null;\n  // eslint-disable-next-line camelcase\n  html_url: string;\n  // eslint-disable-next-line camelcase\n  created_at: string;\n};\n\nconst fetchGithubRepos = async (query: string) => {\n  const response = await axios.get(`users/${query}/repos`);\n\n  const repositories = response.data.map((repo: reposFromGithub) => ({\n    name: repo.name,\n    id: repo.id,\n    language: repo.language,\n    linkTo: repo.html_url,\n    createdAt: repo.created_at\n  }));\n\n  return repositories;\n};\n\nexport default fetchGithubRepos;\n","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport axios from '../../../axios';\n\nimport {AplicationSchema} from '../../../redux/reducers/aplication/types';\nimport {StoreSchema} from '../../../redux/store/types';\n\nimport fetchGithubRepos from '../services/fetchGithubRepos';\n\nimport {SET_USER} from '../../../redux/actions/user';\nimport {FETCH_USER_SUCCESS, FETCH_USER_FAIL} from '../../../redux/actions/aplication';\nimport {CACHE_THIS_USER} from '../../../redux/actions/cache';\nimport {CacheSchema} from '../../../redux/reducers/cache/types';\n\nconst useGithubUser = (query: string) => {\n  const dispatch = useDispatch();\n  const {fetchUserStart} = useSelector<StoreSchema, AplicationSchema>(state => state.aplication);\n  const {users} = useSelector<StoreSchema, CacheSchema>(state => state.cache);\n\n  useEffect(() => {\n    if (fetchUserStart) {\n      const fetchGithubUser = async () => {\n        const alreadyCached = users.find(\n          user => user.nickname.toLowerCase() === query.toLowerCase()\n        );\n\n        try {\n          const response = await axios.get(`users/${query}`, {\n            headers: {'If-None-Match': alreadyCached?.etag}\n          });\n          console.log(response);\n\n          if (response.data) {\n            const repositories = await fetchGithubRepos(query);\n\n            const {\n              id,\n              email,\n              login: nickname,\n              name,\n              avatar_url: avatarURL,\n              bio: description,\n              created_at: createdAt,\n              public_repos: repos,\n              following,\n              followers\n            } = response.data;\n\n            const user = {\n              id,\n              email,\n              nickname,\n              name,\n              avatarURL,\n              description,\n              createdAt,\n              following,\n              followers,\n              repos,\n              repositories\n            };\n\n            const {etag} = response.headers;\n\n            dispatch({type: SET_USER, payload: {...user}});\n            dispatch({type: CACHE_THIS_USER, payload: {...user, etag, query}});\n            dispatch({type: FETCH_USER_SUCCESS});\n          }\n        } catch (err) {\n          if (err.response && err.response.status === 304) {\n            dispatch({type: SET_USER, payload: {...alreadyCached}});\n            dispatch({type: FETCH_USER_SUCCESS});\n            console.log('passando por aqui 2');\n          } else {\n            console.log(err);\n            dispatch({type: FETCH_USER_FAIL});\n          }\n        }\n      };\n\n      fetchGithubUser();\n    }\n  }, [fetchUserStart]);\n};\n\nexport default useGithubUser;\n","import React, {useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport styled from 'styled-components';\nimport {Button} from 'semantic-ui-react';\n\nimport SearchBar from '../SearchBar';\nimport GithubUser from '../GithubUser';\nimport UserRepositories from '../UserRepositories';\n\nimport {UserSchema} from '../../redux/reducers/user/types';\nimport {StoreSchema} from '../../redux/store/types';\nimport useGithubUser from './hooks/useGithubUser';\nimport {FETCH_USER_START} from '../../redux/actions/aplication';\nimport {AplicationSchema} from '../../redux/reducers/aplication/types';\n\nconst Aplication = () => {\n  const dispatch = useDispatch();\n  const githubUser = useSelector<StoreSchema, UserSchema>(state => state.user);\n  const {fetchUserSuccess} = useSelector<StoreSchema, AplicationSchema>(state => state.aplication);\n\n  const [query, setQuery] = useState('');\n  const [timeout, handleTimeout] = useState<number | undefined>(undefined);\n\n  const handleQuery = (value: string) => {\n    setQuery(() => value);\n\n    clearTimeout(timeout);\n\n    const timer = setTimeout(() => {\n      dispatch({type: FETCH_USER_START});\n    }, 1000);\n\n    handleTimeout(timer);\n  };\n\n  useGithubUser(query);\n\n  return (\n    <>\n      <SearchBar query={query} callback={handleQuery} />\n      <AppContainer>\n        {fetchUserSuccess ? (\n          <>\n            <GithubUser\n              id=\"github-user\"\n              nickname={githubUser.nickname}\n              email={githubUser.email}\n              name={githubUser.name}\n              avatarURL={githubUser.avatarURL}\n              description={githubUser.description}\n              createdAt={githubUser.createdAt}\n              repos={githubUser.repos}\n              followers={githubUser.followers}\n              following={githubUser.following}\n            />\n            <UserRepositories repositories={githubUser.repositories} />\n          </>\n        ) : (\n          <div />\n        )}\n      </AppContainer>\n    </>\n  );\n};\n\nconst AppContainer = styled.main`\n  height: calc(100vh - 80px);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background: grey;\n`;\n\nexport default Aplication;\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {PersistGate} from 'redux-persist/integration/react';\nimport {store, persistor} from './redux/store';\n\nimport Aplication from './components/Aplication';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Aplication />\n      </PersistGate>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}